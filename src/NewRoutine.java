
import com.mysql.jdbc.Connection;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mdgaurab
 */
public class NewRoutine extends javax.swing.JFrame {

    /**
     * Creates new form NewRoutine
     */
    private final Font font = new Font("Monospaced", Font.PLAIN, 15);

    private void ResetTheJtable() {
        DBConnection DBOBJ = new DBConnection();
        Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
        Statement stmnt = null;
        ResultSet rsltst = null;
        String q1 = "SELECT course_code, session, building_name, room_no, exam_time  FROM exam_routine join course using(course_id) join exam_hall using(exam_hall_id)";
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            Exam_Table.setModel(DbUtils.resultSetToTableModel(rsltst));
            /*while (rsltst.next()) {
             System.out.println(rsltst.getString(1) + " --> " + rsltst.getString(2));
             }*/
            stmnt.close();
            rsltst.close();
            connect.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
    }

    private void FillComboBox() {
        DBConnection DBOBJ = new DBConnection();
        Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
        Statement stmnt = null;
        ResultSet rsltst = null;
        String q1 = "SELECT distinct course_code FROM course";
        Course_List_CB.removeAllItems();
        Course_List_CB.setFont(font);
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                Course_List_CB.addItem(String.format("%s", rsltst.getString(1)));
            }
            stmnt.close();
            rsltst.close();
            //connect.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
        q1 = String.format("SELECT * FROM course where course_code = '%s'", Course_List_CB.getSelectedItem().toString());
        Session_CB.removeAllItems();
        Session_CB.setFont(font);
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                Session_CB.addItem(String.format("%s", rsltst.getString(3)));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
        q1 = "SELECT distinct building_name FROM exam_hall";
        Building_CB.removeAllItems();
        Building_CB.setFont(font);
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                Building_CB.addItem(String.format("%s", rsltst.getString(1)));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
        q1 = String.format("SELECT * FROM exam_hall where building_name = '%s'", Building_CB.getSelectedItem().toString());
        Room_CB.removeAllItems();
        Room_CB.setFont(font);
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                Room_CB.addItem(String.format("%s", rsltst.getString(3)));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
        try {
            connect.close();
        } catch (SQLException ExC) {
            System.out.println(ExC);
        }
    }

    public NewRoutine() {
        initComponents();
        ResetTheJtable();
        FillComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NewRoutinePanel = new javax.swing.JPanel();
        Exam_Table_Scroll_Pane = new javax.swing.JScrollPane();
        Exam_Table = new javax.swing.JTable();
        Add_BTN = new javax.swing.JButton();
        Remove_BTN = new javax.swing.JButton();
        Course_List_CB = new javax.swing.JComboBox();
        Session_CB = new javax.swing.JComboBox();
        Building_CB = new javax.swing.JComboBox();
        Room_CB = new javax.swing.JComboBox();
        course_list_lbl = new javax.swing.JLabel();
        session_lbl = new javax.swing.JLabel();
        building_lbl = new javax.swing.JLabel();
        Room_lbl = new javax.swing.JLabel();
        data_lbl = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        time_lbl = new javax.swing.JLabel();
        jTimeChooser = new lu.tudor.santec.jtimechooser.JTimeChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 640));
        setMinimumSize(new java.awt.Dimension(800, 640));
        setPreferredSize(new java.awt.Dimension(800, 640));

        NewRoutinePanel.setMaximumSize(new java.awt.Dimension(800, 640));
        NewRoutinePanel.setMinimumSize(new java.awt.Dimension(800, 640));
        NewRoutinePanel.setPreferredSize(new java.awt.Dimension(800, 640));

        Exam_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course Code", "Session", "Building", "Room", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Exam_Table_Scroll_Pane.setViewportView(Exam_Table);

        Add_BTN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Add_BTN.setText("Add");
        Add_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_BTNActionPerformed(evt);
            }
        });

        Remove_BTN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Remove_BTN.setText("Remove");
        Remove_BTN.setMaximumSize(new java.awt.Dimension(51, 23));
        Remove_BTN.setMinimumSize(new java.awt.Dimension(51, 23));
        Remove_BTN.setPreferredSize(new java.awt.Dimension(51, 23));
        Remove_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_BTNActionPerformed(evt);
            }
        });

        Course_List_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Course_List_CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Course_List_CBItemStateChanged(evt);
            }
        });

        Session_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Building_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Building_CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Building_CBItemStateChanged(evt);
            }
        });

        Room_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        course_list_lbl.setText("Course List");

        session_lbl.setText("Session");

        building_lbl.setText("Building");

        Room_lbl.setText("Room");

        data_lbl.setText("Date ");

        time_lbl.setText("Time");

        javax.swing.GroupLayout NewRoutinePanelLayout = new javax.swing.GroupLayout(NewRoutinePanel);
        NewRoutinePanel.setLayout(NewRoutinePanelLayout);
        NewRoutinePanelLayout.setHorizontalGroup(
            NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewRoutinePanelLayout.createSequentialGroup()
                .addComponent(Exam_Table_Scroll_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Add_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Remove_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(NewRoutinePanelLayout.createSequentialGroup()
                        .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(course_list_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(session_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(building_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(NewRoutinePanelLayout.createSequentialGroup()
                                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Room_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                    .addComponent(data_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Course_List_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Session_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Building_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Room_CB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(NewRoutinePanelLayout.createSequentialGroup()
                        .addComponent(time_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTimeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        NewRoutinePanelLayout.setVerticalGroup(
            NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Exam_Table_Scroll_Pane, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
            .addGroup(NewRoutinePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Course_List_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(course_list_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Session_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(session_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Building_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(building_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Room_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Room_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(data_lbl)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewRoutinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTimeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Add_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Remove_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewRoutinePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewRoutinePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Add_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_BTNActionPerformed
        // TODO add your handling code here:
        //System.out.println(jDateChooser.getDate()+" --> "+jTimeChooser.getFormatedTime());
        DBConnection DBOBJ = new DBConnection();
        Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
        Statement stmnt = null;
        ResultSet rsltst = null;
        String q1;
        int c_id = -1, eh_id = -1;
        String time_stmp;
        try {
            q1 = String.format("SELECT course_id FROM course where course_code='%s' and session=%s", Course_List_CB.getSelectedItem().toString(),
                    Session_CB.getSelectedItem().toString());
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                c_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        try {
            q1 = String.format("SELECT exam_hall_id FROM exam_hall where building_name='%s' and room_no=%s", Building_CB.getSelectedItem().toString(),
                    Room_CB.getSelectedItem().toString());
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                eh_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        //System.out.println("COURSE_ID and EXAM_HALL: "+c_id+" -- "+eh_id);
        time_stmp = Integer.toString(jDateChooser.getDate().getYear() + 1900) + "-" + Integer.toString(jDateChooser.getDate().getMonth() + 1)
                + "-" + Integer.toString(jDateChooser.getDate().getDate()) + " " + jTimeChooser.getFormatedTime();
        //System.out.println("HAKAU: " + time_stmp);
        q1 = String.format("INSERT INTO exam_routine(course_id,exam_hall_id, exam_time) values(%s,%s,'%s')", Integer.toString(c_id),
                Integer.toString(eh_id), time_stmp);
        try {
            stmnt = (Statement) connect.createStatement();
            stmnt.executeUpdate(q1);
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        ResetTheJtable();

        generate(c_id, eh_id);

    }//GEN-LAST:event_Add_BTNActionPerformed

    private void generate(int c_id, int eh_id) {
        DBConnection DBOBJ = new DBConnection();
        Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
        Statement stmnt = null;
        ResultSet rsltst = null;
        String q1;
        int exm_id = 0;
        q1 = String.format("SELECT exam_id FROM exam_routine where course_id='%s' and exam_hall_id=%s", Integer.toString(c_id), Integer.toString(eh_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                exm_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        int numberOfRegisteredStudent = 0;
        q1 = String.format("SELECT count(*) FROM course_registration where course_id = %s GROUP BY course_id", Integer.toString(c_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                numberOfRegisteredStudent = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        int noInvigilatorNeeded = (numberOfRegisteredStudent > 40 ? 4 : 2);
        int courseTeacher = 0;
        int chairman_id = 0;
        double course_credit = 0;

        Vector<Integer> vct = new Vector<Integer>();
        Vector<Integer> assign = new Vector<Integer>();

        q1 = String.format("SELECT credit FROM course where course_id = %s", Integer.toString(c_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                course_credit = Double.parseDouble(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("SELECT id_instructor FROM teaches where course_id = %s", Integer.toString(c_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                courseTeacher = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("SELECT chairman_id FROM exam_committee where exam_committee_id in(select exam_committee_id from course where course_id = %s) ", Integer.toString(c_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                chairman_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("SELECT invigilator_id FROM invigilator where total_duty>duty_given and invigilator_id !=%s and invigilator_id != %s", Integer.toString(courseTeacher), Integer.toString(chairman_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                int invigilator_id = Integer.parseInt(rsltst.getString(1));
                vct.add(invigilator_id);
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        Random randomGenerator = new Random();

        for (int i = 0; i < noInvigilatorNeeded; ++i) {
            //System.out.println("Exception: ######"+vct.size());
            int randomInt = randomGenerator.nextInt(vct.size());
            assign.add(vct.elementAt(randomInt));
            vct.removeElementAt(randomInt);
        }

        for (int i = 0; i < assign.size(); ++i) {
            q1 = String.format("insert into teacher_assign(invigilator_id,exam_id) values(%s,%s)", Integer.toString(assign.elementAt(i)), Integer.toString(exm_id));
            try {
                stmnt = (Statement) connect.createStatement();
                stmnt.executeUpdate(q1);
                stmnt.close();
                rsltst.close();
            } catch (SQLException EcX) {
                System.out.println(EcX);
            }

            q1 = String.format("update invigilator set duty_given = duty_given+1,total_credit=total_credit+%s where invigilator_id = %s", Double.toString(course_credit), Integer.toString(assign.elementAt(i)));
            try {
                stmnt = (Statement) connect.createStatement();
                stmnt.executeUpdate(q1);
                stmnt.close();
                rsltst.close();
            } catch (SQLException EcX) {
                System.out.println(EcX);
            }
        }

        q1 = String.format("insert into teacher_assign(invigilator_id,exam_id) values(%s,%s)", Integer.toString(courseTeacher), Integer.toString(exm_id));
        try {
            stmnt = (Statement) connect.createStatement();
            stmnt.executeUpdate(q1);
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("update invigilator set duty_given = duty_given+1,total_credit=total_credit+%s where invigilator_id = %s", Double.toString(course_credit), Integer.toString(courseTeacher));
        try {
            stmnt = (Statement) connect.createStatement();
            stmnt.executeUpdate(q1);
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        try {
            connect.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }


    private void Course_List_CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Course_List_CBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            DBConnection DBOBJ = new DBConnection();
            Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
            Statement stmnt = null;
            ResultSet rsltst = null;
            String q1 = String.format("SELECT * FROM course where course_code = '%s'", Course_List_CB.getSelectedItem().toString());
            Session_CB.removeAllItems();
            Session_CB.setFont(font);
            try {
                stmnt = (Statement) connect.createStatement();
                rsltst = stmnt.executeQuery(q1);
                while (rsltst.next()) {
                    Session_CB.addItem(String.format("%s", rsltst.getString(3)));
                }
                stmnt.close();
                rsltst.close();
                connect.close();
            } catch (SQLException ExC) {
                System.out.println(ExC);
            }
        }
    }//GEN-LAST:event_Course_List_CBItemStateChanged

    private void Building_CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Building_CBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            DBConnection DBOBJ = new DBConnection();
            Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
            Statement stmnt = null;
            ResultSet rsltst = null;
            String q1 = String.format("SELECT * FROM exam_hall where building_name = '%s'", Building_CB.getSelectedItem().toString());
            Room_CB.removeAllItems();
            Room_CB.setFont(font);
            try {
                stmnt = (Statement) connect.createStatement();
                rsltst = stmnt.executeQuery(q1);
                while (rsltst.next()) {
                    Room_CB.addItem(String.format("%s", rsltst.getString(3)));
                }
                stmnt.close();
                rsltst.close();
                connect.close();
            } catch (SQLException ExC) {
                System.out.println(ExC);
            }
        }
    }//GEN-LAST:event_Building_CBItemStateChanged

    private void Remove_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_BTNActionPerformed
        // TODO add your handling code here:
        DBConnection DBOBJ = new DBConnection();
        Connection connect = (Connection) DBOBJ.dbConnect(DBConnection.dataBaseUrl, DBConnection.dataBaseUserName, DBConnection.dataBasePassWord);
        Statement stmnt = null;
        ResultSet rsltst = null;
        String q1;
        int c_id = -1, eh_id = -1;
        int iid = Exam_Table.getSelectedRow();
        String siid = null;
        String time_stmp;
        try {
            q1 = String.format("SELECT course_id FROM course where course_code='%s' and session=%s", Exam_Table.getModel().getValueAt(iid, 0).toString(),
                    Exam_Table.getModel().getValueAt(iid, 1).toString());
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                c_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        try {
            q1 = String.format("SELECT exam_hall_id FROM exam_hall where building_name='%s' and room_no=%s", Exam_Table.getModel().getValueAt(iid, 2).toString(),
                    Exam_Table.getModel().getValueAt(iid, 3).toString());
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                eh_id = Integer.parseInt(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        q1 = String.format("SELECT exam_id FROM exam_routine where course_id='%s' and exam_hall_id=%s", Integer.toString(c_id), Integer.toString(eh_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                siid = rsltst.getString(1);
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        Vector<Integer> del = new Vector<Integer>();
        double course_credit = 0;

        q1 = String.format("SELECT credit FROM course where course_id = %s", Integer.toString(c_id));
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                course_credit = Double.parseDouble(rsltst.getString(1));
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("SELECT invigilator_id FROM teacher_assign where exam_id =%s", siid);
        try {
            stmnt = (Statement) connect.createStatement();
            rsltst = stmnt.executeQuery(q1);
            while (rsltst.next()) {
                int invigilator_id = Integer.parseInt(rsltst.getString(1));
                del.add(invigilator_id);
            }
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        for (int i = 0; i < del.size(); ++i) {
            q1 = String.format("update invigilator set duty_given = duty_given-1,total_credit=total_credit-%s where invigilator_id = %s", Double.toString(course_credit), Integer.toString(del.elementAt(i)));
            try {
                stmnt = (Statement) connect.createStatement();
                stmnt.executeUpdate(q1);
                stmnt.close();
                rsltst.close();
            } catch (SQLException EcX) {
                System.out.println(EcX);
            }
        }

        q1 = String.format("DELETE FROM teacher_assign WHERE exam_id=%s", siid);
        try {
            stmnt = (Statement) connect.createStatement();
            stmnt.executeUpdate(q1);
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }

        q1 = String.format("DELETE FROM exam_routine WHERE exam_id=%s", siid);
        try {
            stmnt = (Statement) connect.createStatement();
            stmnt.executeUpdate(q1);
            stmnt.close();
            rsltst.close();
        } catch (SQLException EcX) {
            System.out.println(EcX);
        }
        try {
            connect.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        ResetTheJtable();
    }//GEN-LAST:event_Remove_BTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_BTN;
    private javax.swing.JComboBox Building_CB;
    private javax.swing.JComboBox Course_List_CB;
    private javax.swing.JTable Exam_Table;
    private javax.swing.JScrollPane Exam_Table_Scroll_Pane;
    private javax.swing.JPanel NewRoutinePanel;
    private javax.swing.JButton Remove_BTN;
    private javax.swing.JComboBox Room_CB;
    private javax.swing.JLabel Room_lbl;
    private javax.swing.JComboBox Session_CB;
    private javax.swing.JLabel building_lbl;
    private javax.swing.JLabel course_list_lbl;
    private javax.swing.JLabel data_lbl;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private lu.tudor.santec.jtimechooser.JTimeChooser jTimeChooser;
    private javax.swing.JLabel session_lbl;
    private javax.swing.JLabel time_lbl;
    // End of variables declaration//GEN-END:variables

}
